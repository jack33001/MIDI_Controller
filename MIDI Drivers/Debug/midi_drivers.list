
midi_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000362c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e4  080037e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037ec  080037ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08003800  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003800  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db00  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8f  00000000  00000000  0002db3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002f7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  00030418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175f2  00000000  00000000  00030fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d866  00000000  00000000  000485aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a7ef  00000000  00000000  00055e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e05ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033bc  00000000  00000000  000e0650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080037ac 	.word	0x080037ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080037ac 	.word	0x080037ac

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fbd1 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f825 	bl	8000534 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f9b9 	bl	8000860 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 80004ee:	f000 f893 	bl	8000618 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80004f2:	f000 f8f1 	bl	80006d8 <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 80004f6:	f000 f985 	bl	8000804 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  midi_t midi_struct = {1,&huart1};
 80004fa:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <main+0x54>)
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000502:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t note = 64;
 8000506:	2340      	movs	r3, #64	; 0x40
 8000508:	73fb      	strb	r3, [r7, #15]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  note_on(64,midi_struct);
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000510:	2040      	movs	r0, #64	; 0x40
 8000512:	f000 f9f5 	bl	8000900 <_Z7note_onm11midi_struct>
	  HAL_Delay(200);
 8000516:	20c8      	movs	r0, #200	; 0xc8
 8000518:	f000 fc28 	bl	8000d6c <HAL_Delay>
	  note_off(64,midi_struct);
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000522:	2040      	movs	r0, #64	; 0x40
 8000524:	f000 fa12 	bl	800094c <_Z8note_offm11midi_struct>
	  HAL_Delay(200);
 8000528:	20c8      	movs	r0, #200	; 0xc8
 800052a:	f000 fc1f 	bl	8000d6c <HAL_Delay>
	  note_on(64,midi_struct);
 800052e:	e7ec      	b.n	800050a <main+0x2e>
 8000530:	080037c4 	.word	0x080037c4

08000534 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f003 f92a 	bl	800379c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <_Z18SystemClock_Configv+0xdc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a2b      	ldr	r2, [pc, #172]	; (8000610 <_Z18SystemClock_Configv+0xdc>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <_Z18SystemClock_Configv+0xdc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b26      	ldr	r3, [pc, #152]	; (8000614 <_Z18SystemClock_Configv+0xe0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a25      	ldr	r2, [pc, #148]	; (8000614 <_Z18SystemClock_Configv+0xe0>)
 800057e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b23      	ldr	r3, [pc, #140]	; (8000614 <_Z18SystemClock_Configv+0xe0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005a4:	2319      	movs	r3, #25
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005a8:	23c0      	movs	r3, #192	; 0xc0
 80005aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 ff23 	bl	8001404 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	bf14      	ite	ne
 80005c4:	2301      	movne	r3, #1
 80005c6:	2300      	moveq	r3, #0
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80005ce:	f000 f991 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2103      	movs	r1, #3
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 f980 	bl	80018f4 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000604:	f000 f976 	bl	80008f4 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3750      	adds	r7, #80	; 0x50
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <_ZL12MX_TIM1_Initv+0xb8>)
 8000636:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000638:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 800063a:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <_ZL12MX_TIM1_Initv+0xb8>)
 800063c:	225f      	movs	r2, #95	; 0x5f
 800063e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000640:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <_ZL12MX_TIM1_Initv+0xb8>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000646:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <_ZL12MX_TIM1_Initv+0xb8>)
 8000648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800064c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064e:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <_ZL12MX_TIM1_Initv+0xb8>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <_ZL12MX_TIM1_Initv+0xb8>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065a:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <_ZL12MX_TIM1_Initv+0xb8>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000660:	481b      	ldr	r0, [pc, #108]	; (80006d0 <_ZL12MX_TIM1_Initv+0xb8>)
 8000662:	f001 fb27 	bl	8001cb4 <HAL_TIM_Base_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	bf14      	ite	ne
 800066c:	2301      	movne	r3, #1
 800066e:	2300      	moveq	r3, #0
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8000676:	f000 f93d 	bl	80008f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	4619      	mov	r1, r3
 8000686:	4812      	ldr	r0, [pc, #72]	; (80006d0 <_ZL12MX_TIM1_Initv+0xb8>)
 8000688:	f001 fc74 	bl	8001f74 <HAL_TIM_ConfigClockSource>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	bf14      	ite	ne
 8000692:	2301      	movne	r3, #1
 8000694:	2300      	moveq	r3, #0
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 800069c:	f000 f92a 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a0:	2300      	movs	r3, #0
 80006a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	4619      	mov	r1, r3
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <_ZL12MX_TIM1_Initv+0xb8>)
 80006ae:	f001 ffcf 	bl	8002650 <HAL_TIMEx_MasterConfigSynchronization>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	bf14      	ite	ne
 80006b8:	2301      	movne	r3, #1
 80006ba:	2300      	moveq	r3, #0
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 80006c2:	f000 f917 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000028 	.word	0x20000028
 80006d4:	40010000 	.word	0x40010000

080006d8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
 80006f6:	615a      	str	r2, [r3, #20]
 80006f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006fa:	4b41      	ldr	r3, [pc, #260]	; (8000800 <_ZL12MX_TIM2_Initv+0x128>)
 80006fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000700:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8000702:	4b3f      	ldr	r3, [pc, #252]	; (8000800 <_ZL12MX_TIM2_Initv+0x128>)
 8000704:	225f      	movs	r2, #95	; 0x5f
 8000706:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000708:	4b3d      	ldr	r3, [pc, #244]	; (8000800 <_ZL12MX_TIM2_Initv+0x128>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 800070e:	4b3c      	ldr	r3, [pc, #240]	; (8000800 <_ZL12MX_TIM2_Initv+0x128>)
 8000710:	2231      	movs	r2, #49	; 0x31
 8000712:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000714:	4b3a      	ldr	r3, [pc, #232]	; (8000800 <_ZL12MX_TIM2_Initv+0x128>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071a:	4b39      	ldr	r3, [pc, #228]	; (8000800 <_ZL12MX_TIM2_Initv+0x128>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000720:	4837      	ldr	r0, [pc, #220]	; (8000800 <_ZL12MX_TIM2_Initv+0x128>)
 8000722:	f001 fb16 	bl	8001d52 <HAL_TIM_PWM_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	bf14      	ite	ne
 800072c:	2301      	movne	r3, #1
 800072e:	2300      	moveq	r3, #0
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 8000736:	f000 f8dd 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	4619      	mov	r1, r3
 8000748:	482d      	ldr	r0, [pc, #180]	; (8000800 <_ZL12MX_TIM2_Initv+0x128>)
 800074a:	f001 ff81 	bl	8002650 <HAL_TIMEx_MasterConfigSynchronization>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	bf14      	ite	ne
 8000754:	2301      	movne	r3, #1
 8000756:	2300      	moveq	r3, #0
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 800075e:	f000 f8c9 	bl	80008f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000762:	2360      	movs	r3, #96	; 0x60
 8000764:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	4619      	mov	r1, r3
 8000778:	4821      	ldr	r0, [pc, #132]	; (8000800 <_ZL12MX_TIM2_Initv+0x128>)
 800077a:	f001 fb39 	bl	8001df0 <HAL_TIM_PWM_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf14      	ite	ne
 8000784:	2301      	movne	r3, #1
 8000786:	2300      	moveq	r3, #0
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <_ZL12MX_TIM2_Initv+0xba>
  {
    Error_Handler();
 800078e:	f000 f8b1 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2204      	movs	r2, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4819      	ldr	r0, [pc, #100]	; (8000800 <_ZL12MX_TIM2_Initv+0x128>)
 800079a:	f001 fb29 	bl	8001df0 <HAL_TIM_PWM_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	bf14      	ite	ne
 80007a4:	2301      	movne	r3, #1
 80007a6:	2300      	moveq	r3, #0
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 80007ae:	f000 f8a1 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2208      	movs	r2, #8
 80007b6:	4619      	mov	r1, r3
 80007b8:	4811      	ldr	r0, [pc, #68]	; (8000800 <_ZL12MX_TIM2_Initv+0x128>)
 80007ba:	f001 fb19 	bl	8001df0 <HAL_TIM_PWM_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	bf14      	ite	ne
 80007c4:	2301      	movne	r3, #1
 80007c6:	2300      	moveq	r3, #0
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <_ZL12MX_TIM2_Initv+0xfa>
  {
    Error_Handler();
 80007ce:	f000 f891 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	220c      	movs	r2, #12
 80007d6:	4619      	mov	r1, r3
 80007d8:	4809      	ldr	r0, [pc, #36]	; (8000800 <_ZL12MX_TIM2_Initv+0x128>)
 80007da:	f001 fb09 	bl	8001df0 <HAL_TIM_PWM_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	bf14      	ite	ne
 80007e4:	2301      	movne	r3, #1
 80007e6:	2300      	moveq	r3, #0
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <_ZL12MX_TIM2_Initv+0x11a>
  {
    Error_Handler();
 80007ee:	f000 f881 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007f2:	4803      	ldr	r0, [pc, #12]	; (8000800 <_ZL12MX_TIM2_Initv+0x128>)
 80007f4:	f000 f950 	bl	8000a98 <HAL_TIM_MspPostInit>

}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000070 	.word	0x20000070

08000804 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <_ZL19MX_USART1_UART_Initv+0x54>)
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <_ZL19MX_USART1_UART_Initv+0x58>)
 800080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <_ZL19MX_USART1_UART_Initv+0x54>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <_ZL19MX_USART1_UART_Initv+0x54>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <_ZL19MX_USART1_UART_Initv+0x54>)
 800083c:	f001 ff76 	bl	800272c <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf14      	ite	ne
 8000846:	2301      	movne	r3, #1
 8000848:	2300      	moveq	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000850:	f000 f850 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000b8 	.word	0x200000b8
 800085c:	40011000 	.word	0x40011000

08000860 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <_ZL12MX_GPIO_Initv+0x8c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <_ZL12MX_GPIO_Initv+0x8c>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <_ZL12MX_GPIO_Initv+0x8c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <_ZL12MX_GPIO_Initv+0x8c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a14      	ldr	r2, [pc, #80]	; (80008ec <_ZL12MX_GPIO_Initv+0x8c>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <_ZL12MX_GPIO_Initv+0x8c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <_ZL12MX_GPIO_Initv+0x8c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <_ZL12MX_GPIO_Initv+0x8c>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <_ZL12MX_GPIO_Initv+0x8c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	4804      	ldr	r0, [pc, #16]	; (80008f0 <_ZL12MX_GPIO_Initv+0x90>)
 80008e0:	f000 fc0c 	bl	80010fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020800 	.word	0x40020800

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <_Z7note_onm11midi_struct>:
*  		The data bytes give note and velocity, respectively. the following example sends a middle C with velocity 100 on channel 10:
*
*  		0x9A 0x3C 0x64
*/
void note_on(uint32_t note, midi_t midi_struct)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	e883 0006 	stmia.w	r3, {r1, r2}
	  buffer[0] = 0x09;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <_Z7note_onm11midi_struct+0x48>)
 8000910:	2209      	movs	r2, #9
 8000912:	701a      	strb	r2, [r3, #0]
	  buffer[1] = 0x90 | midi_struct.channel;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <_Z7note_onm11midi_struct+0x48>)
 8000920:	705a      	strb	r2, [r3, #1]
	  buffer[2] = 0x7f & note;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800092a:	b2da      	uxtb	r2, r3
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <_Z7note_onm11midi_struct+0x48>)
 800092e:	709a      	strb	r2, [r3, #2]
	  send_midi(*buffer,midi_struct);
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <_Z7note_onm11midi_struct+0x48>)
 8000932:	7818      	ldrb	r0, [r3, #0]
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	e893 0006 	ldmia.w	r3, {r1, r2}
 800093a:	f000 f82d 	bl	8000998 <_Z9send_midic11midi_struct>
}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000fc 	.word	0x200000fc

0800094c <_Z8note_offm11midi_struct>:

// Create and send a MIDI note off message
//		these messages tell the device that a note has been released
void note_off(uint32_t note, midi_t midi_struct)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	e883 0006 	stmia.w	r3, {r1, r2}
	  buffer[0] = 0x08;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <_Z8note_offm11midi_struct+0x48>)
 800095c:	2208      	movs	r2, #8
 800095e:	701a      	strb	r2, [r3, #0]
	  buffer[1] = 0x80 | midi_struct.channel;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <_Z8note_offm11midi_struct+0x48>)
 800096c:	705a      	strb	r2, [r3, #1]
	  buffer[2] = 0x7f & note;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <_Z8note_offm11midi_struct+0x48>)
 800097a:	709a      	strb	r2, [r3, #2]
	  send_midi(*buffer,midi_struct);
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <_Z8note_offm11midi_struct+0x48>)
 800097e:	7818      	ldrb	r0, [r3, #0]
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000986:	f000 f807 	bl	8000998 <_Z9send_midic11midi_struct>
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000fc 	.word	0x200000fc

08000998 <_Z9send_midic11midi_struct>:
	  buffer[2] = 0x7f & cc_num;
	  send_midi(*buffer,midi_struct);
}

void send_midi(char msg, midi_t midi)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	e883 0006 	stmia.w	r3, {r1, r2}
 80009a4:	4603      	mov	r3, r0
 80009a6:	73fb      	strb	r3, [r7, #15]
	  HAL_UART_Transmit(midi.uartptr,(uint8_t*)buffer,3,1000);
 80009a8:	68b8      	ldr	r0, [r7, #8]
 80009aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ae:	2203      	movs	r2, #3
 80009b0:	4903      	ldr	r1, [pc, #12]	; (80009c0 <_Z9send_midic11midi_struct+0x28>)
 80009b2:	f001 ff08 	bl	80027c6 <HAL_UART_Transmit>
}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000fc 	.word	0x200000fc

080009c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <HAL_TIM_Base_MspInit+0x3c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d10d      	bne.n	8000a42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_TIM_Base_MspInit+0x40>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <HAL_TIM_Base_MspInit+0x40>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <HAL_TIM_Base_MspInit+0x40>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40010000 	.word	0x40010000
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a68:	d10d      	bne.n	8000a86 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ab8:	d11d      	bne.n	8000af6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_TIM_MspPostInit+0x68>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <HAL_TIM_MspPostInit+0x68>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_TIM_MspPostInit+0x68>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4619      	mov	r1, r3
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <HAL_TIM_MspPostInit+0x6c>)
 8000af2:	f000 fb03 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000

08000b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <HAL_UART_MspInit+0x94>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d134      	bne.n	8000b94 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b34:	f043 0310 	orr.w	r3, r3, #16
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f003 0310 	and.w	r3, r3, #16
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_UART_MspInit+0x98>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b74:	2307      	movs	r3, #7
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <HAL_UART_MspInit+0x9c>)
 8000b80:	f000 fabc 	bl	80010fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2025      	movs	r0, #37	; 0x25
 8000b8a:	f000 f9ee 	bl	8000f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b8e:	2025      	movs	r0, #37	; 0x25
 8000b90:	f000 fa07 	bl	8000fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 f89a 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <USART1_IRQHandler+0x10>)
 8000c02:	f001 fe73 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200000b8 	.word	0x200000b8

08000c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3a:	490e      	ldr	r1, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c50:	4c0b      	ldr	r4, [pc, #44]	; (8000c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c5e:	f7ff ffd7 	bl	8000c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c62:	f002 fd77 	bl	8003754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c66:	f7ff fc39 	bl	80004dc <main>
  bx  lr    
 8000c6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c78:	080037f4 	.word	0x080037f4
  ldr r2, =_sbss
 8000c7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c80:	2000010c 	.word	0x2000010c

08000c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <HAL_Init+0x40>)
 8000c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_Init+0x40>)
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_Init+0x40>)
 8000caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f94f 	bl	8000f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f000 f808 	bl	8000ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fe82 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x54>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x58>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f967 	bl	8000fbe <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00e      	b.n	8000d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d80a      	bhi.n	8000d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d08:	f000 f92f 	bl	8000f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d0c:	4a06      	ldr	r2, [pc, #24]	; (8000d28 <HAL_InitTick+0x5c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e000      	b.n	8000d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000004 	.word	0x20000004

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000108 	.word	0x20000108

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000108 	.word	0x20000108

08000d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d74:	f7ff ffee 	bl	8000d54 <HAL_GetTick>
 8000d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d84:	d005      	beq.n	8000d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_Delay+0x44>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4413      	add	r3, r2
 8000d90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d92:	bf00      	nop
 8000d94:	f7ff ffde 	bl	8000d54 <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d8f7      	bhi.n	8000d94 <HAL_Delay+0x28>
  {
  }
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008

08000db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	db0b      	blt.n	8000e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f003 021f 	and.w	r2, r3, #31
 8000e30:	4907      	ldr	r1, [pc, #28]	; (8000e50 <__NVIC_EnableIRQ+0x38>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	095b      	lsrs	r3, r3, #5
 8000e38:	2001      	movs	r0, #1
 8000e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	bf28      	it	cs
 8000ec6:	2304      	movcs	r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d902      	bls.n	8000ed8 <NVIC_EncodePriority+0x30>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	e000      	b.n	8000eda <NVIC_EncodePriority+0x32>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43d9      	mvns	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	4313      	orrs	r3, r2
         );
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f20:	d301      	bcc.n	8000f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00f      	b.n	8000f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <SysTick_Config+0x40>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2e:	210f      	movs	r1, #15
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f34:	f7ff ff8e 	bl	8000e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <SysTick_Config+0x40>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <SysTick_Config+0x40>)
 8000f40:	2207      	movs	r2, #7
 8000f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	e000e010 	.word	0xe000e010

08000f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ff29 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
 8000f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7c:	f7ff ff3e 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	6978      	ldr	r0, [r7, #20]
 8000f88:	f7ff ff8e 	bl	8000ea8 <NVIC_EncodePriority>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f92:	4611      	mov	r1, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff5d 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f9a:	bf00      	nop
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff31 	bl	8000e18 <__NVIC_EnableIRQ>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ffa2 	bl	8000f10 <SysTick_Config>
 8000fcc:	4603      	mov	r3, r0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff feb6 	bl	8000d54 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d008      	beq.n	8001008 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e052      	b.n	80010ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0216 	bic.w	r2, r2, #22
 8001016:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	695a      	ldr	r2, [r3, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001026:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	2b00      	cmp	r3, #0
 800102e:	d103      	bne.n	8001038 <HAL_DMA_Abort+0x62>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001034:	2b00      	cmp	r3, #0
 8001036:	d007      	beq.n	8001048 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0208 	bic.w	r2, r2, #8
 8001046:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001058:	e013      	b.n	8001082 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800105a:	f7ff fe7b 	bl	8000d54 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b05      	cmp	r3, #5
 8001066:	d90c      	bls.n	8001082 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2220      	movs	r2, #32
 800106c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2203      	movs	r2, #3
 8001072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e015      	b.n	80010ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1e4      	bne.n	800105a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001094:	223f      	movs	r2, #63	; 0x3f
 8001096:	409a      	lsls	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d004      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e00c      	b.n	80010ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2205      	movs	r2, #5
 80010d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0201 	bic.w	r2, r2, #1
 80010ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	e159      	b.n	80013cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	429a      	cmp	r2, r3
 8001132:	f040 8148 	bne.w	80013c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b01      	cmp	r3, #1
 8001140:	d005      	beq.n	800114e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114a:	2b02      	cmp	r3, #2
 800114c:	d130      	bne.n	80011b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f003 0201 	and.w	r2, r3, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d017      	beq.n	80011ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d123      	bne.n	8001240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	08da      	lsrs	r2, r3, #3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3208      	adds	r2, #8
 8001200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	220f      	movs	r2, #15
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	691a      	ldr	r2, [r3, #16]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	08da      	lsrs	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3208      	adds	r2, #8
 800123a:	69b9      	ldr	r1, [r7, #24]
 800123c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0203 	and.w	r2, r3, #3
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80a2 	beq.w	80013c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b57      	ldr	r3, [pc, #348]	; (80013e4 <HAL_GPIO_Init+0x2e8>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a56      	ldr	r2, [pc, #344]	; (80013e4 <HAL_GPIO_Init+0x2e8>)
 800128c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b54      	ldr	r3, [pc, #336]	; (80013e4 <HAL_GPIO_Init+0x2e8>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129e:	4a52      	ldr	r2, [pc, #328]	; (80013e8 <HAL_GPIO_Init+0x2ec>)
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	220f      	movs	r2, #15
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a49      	ldr	r2, [pc, #292]	; (80013ec <HAL_GPIO_Init+0x2f0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d019      	beq.n	80012fe <HAL_GPIO_Init+0x202>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <HAL_GPIO_Init+0x2f4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d013      	beq.n	80012fa <HAL_GPIO_Init+0x1fe>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a47      	ldr	r2, [pc, #284]	; (80013f4 <HAL_GPIO_Init+0x2f8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d00d      	beq.n	80012f6 <HAL_GPIO_Init+0x1fa>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a46      	ldr	r2, [pc, #280]	; (80013f8 <HAL_GPIO_Init+0x2fc>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d007      	beq.n	80012f2 <HAL_GPIO_Init+0x1f6>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a45      	ldr	r2, [pc, #276]	; (80013fc <HAL_GPIO_Init+0x300>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d101      	bne.n	80012ee <HAL_GPIO_Init+0x1f2>
 80012ea:	2304      	movs	r3, #4
 80012ec:	e008      	b.n	8001300 <HAL_GPIO_Init+0x204>
 80012ee:	2307      	movs	r3, #7
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x204>
 80012f2:	2303      	movs	r3, #3
 80012f4:	e004      	b.n	8001300 <HAL_GPIO_Init+0x204>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e002      	b.n	8001300 <HAL_GPIO_Init+0x204>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <HAL_GPIO_Init+0x204>
 80012fe:	2300      	movs	r3, #0
 8001300:	69fa      	ldr	r2, [r7, #28]
 8001302:	f002 0203 	and.w	r2, r2, #3
 8001306:	0092      	lsls	r2, r2, #2
 8001308:	4093      	lsls	r3, r2
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001310:	4935      	ldr	r1, [pc, #212]	; (80013e8 <HAL_GPIO_Init+0x2ec>)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	089b      	lsrs	r3, r3, #2
 8001316:	3302      	adds	r3, #2
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131e:	4b38      	ldr	r3, [pc, #224]	; (8001400 <HAL_GPIO_Init+0x304>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001342:	4a2f      	ldr	r2, [pc, #188]	; (8001400 <HAL_GPIO_Init+0x304>)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001348:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <HAL_GPIO_Init+0x304>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800136c:	4a24      	ldr	r2, [pc, #144]	; (8001400 <HAL_GPIO_Init+0x304>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001372:	4b23      	ldr	r3, [pc, #140]	; (8001400 <HAL_GPIO_Init+0x304>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001396:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <HAL_GPIO_Init+0x304>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_GPIO_Init+0x304>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c0:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <HAL_GPIO_Init+0x304>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3301      	adds	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	2b0f      	cmp	r3, #15
 80013d0:	f67f aea2 	bls.w	8001118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40013800 	.word	0x40013800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40020c00 	.word	0x40020c00
 80013fc:	40021000 	.word	0x40021000
 8001400:	40013c00 	.word	0x40013c00

08001404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e267      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d075      	beq.n	800150e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001422:	4b88      	ldr	r3, [pc, #544]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b04      	cmp	r3, #4
 800142c:	d00c      	beq.n	8001448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142e:	4b85      	ldr	r3, [pc, #532]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001436:	2b08      	cmp	r3, #8
 8001438:	d112      	bne.n	8001460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800143a:	4b82      	ldr	r3, [pc, #520]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001446:	d10b      	bne.n	8001460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	4b7e      	ldr	r3, [pc, #504]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d05b      	beq.n	800150c <HAL_RCC_OscConfig+0x108>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d157      	bne.n	800150c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e242      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001468:	d106      	bne.n	8001478 <HAL_RCC_OscConfig+0x74>
 800146a:	4b76      	ldr	r3, [pc, #472]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a75      	ldr	r2, [pc, #468]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e01d      	b.n	80014b4 <HAL_RCC_OscConfig+0xb0>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0x98>
 8001482:	4b70      	ldr	r3, [pc, #448]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6f      	ldr	r2, [pc, #444]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b6d      	ldr	r3, [pc, #436]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a6c      	ldr	r2, [pc, #432]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0xb0>
 800149c:	4b69      	ldr	r3, [pc, #420]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a68      	ldr	r2, [pc, #416]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b66      	ldr	r3, [pc, #408]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a65      	ldr	r2, [pc, #404]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fc4a 	bl	8000d54 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fc46 	bl	8000d54 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	; 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e207      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0xc0>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fc36 	bl	8000d54 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fc32 	bl	8000d54 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e1f3      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	4b51      	ldr	r3, [pc, #324]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0xe8>
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d063      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151a:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800152e:	2b08      	cmp	r3, #8
 8001530:	d11c      	bne.n	800156c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001532:	4b44      	ldr	r3, [pc, #272]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d116      	bne.n	800156c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x152>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e1c7      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4937      	ldr	r1, [pc, #220]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	e03a      	b.n	80015e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001574:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_RCC_OscConfig+0x244>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff fbeb 	bl	8000d54 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff fbe7 	bl	8000d54 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e1a8      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4925      	ldr	r1, [pc, #148]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e015      	b.n	80015e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <HAL_RCC_OscConfig+0x244>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fbca 	bl	8000d54 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fbc6 	bl	8000d54 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e187      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d036      	beq.n	800165c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d016      	beq.n	8001624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_RCC_OscConfig+0x248>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fbaa 	bl	8000d54 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fba6 	bl	8000d54 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e167      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_RCC_OscConfig+0x240>)
 8001618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x200>
 8001622:	e01b      	b.n	800165c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_RCC_OscConfig+0x248>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7ff fb93 	bl	8000d54 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001630:	e00e      	b.n	8001650 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001632:	f7ff fb8f 	bl	8000d54 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d907      	bls.n	8001650 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e150      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
 8001644:	40023800 	.word	0x40023800
 8001648:	42470000 	.word	0x42470000
 800164c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001650:	4b88      	ldr	r3, [pc, #544]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1ea      	bne.n	8001632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 8097 	beq.w	8001798 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166e:	4b81      	ldr	r3, [pc, #516]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10f      	bne.n	800169a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	4b7d      	ldr	r3, [pc, #500]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a7c      	ldr	r2, [pc, #496]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b7a      	ldr	r3, [pc, #488]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001696:	2301      	movs	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	4b77      	ldr	r3, [pc, #476]	; (8001878 <HAL_RCC_OscConfig+0x474>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a6:	4b74      	ldr	r3, [pc, #464]	; (8001878 <HAL_RCC_OscConfig+0x474>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a73      	ldr	r2, [pc, #460]	; (8001878 <HAL_RCC_OscConfig+0x474>)
 80016ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b2:	f7ff fb4f 	bl	8000d54 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ba:	f7ff fb4b 	bl	8000d54 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e10c      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016cc:	4b6a      	ldr	r3, [pc, #424]	; (8001878 <HAL_RCC_OscConfig+0x474>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x2ea>
 80016e0:	4b64      	ldr	r3, [pc, #400]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e4:	4a63      	ldr	r2, [pc, #396]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6713      	str	r3, [r2, #112]	; 0x70
 80016ec:	e01c      	b.n	8001728 <HAL_RCC_OscConfig+0x324>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x30c>
 80016f6:	4b5f      	ldr	r3, [pc, #380]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fa:	4a5e      	ldr	r2, [pc, #376]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6713      	str	r3, [r2, #112]	; 0x70
 8001702:	4b5c      	ldr	r3, [pc, #368]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001706:	4a5b      	ldr	r2, [pc, #364]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6713      	str	r3, [r2, #112]	; 0x70
 800170e:	e00b      	b.n	8001728 <HAL_RCC_OscConfig+0x324>
 8001710:	4b58      	ldr	r3, [pc, #352]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001714:	4a57      	ldr	r2, [pc, #348]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	6713      	str	r3, [r2, #112]	; 0x70
 800171c:	4b55      	ldr	r3, [pc, #340]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	4a54      	ldr	r2, [pc, #336]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001722:	f023 0304 	bic.w	r3, r3, #4
 8001726:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d015      	beq.n	800175c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fb10 	bl	8000d54 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001736:	e00a      	b.n	800174e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001738:	f7ff fb0c 	bl	8000d54 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e0cb      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174e:	4b49      	ldr	r3, [pc, #292]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0ee      	beq.n	8001738 <HAL_RCC_OscConfig+0x334>
 800175a:	e014      	b.n	8001786 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175c:	f7ff fafa 	bl	8000d54 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff faf6 	bl	8000d54 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e0b5      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177a:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1ee      	bne.n	8001764 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001786:	7dfb      	ldrb	r3, [r7, #23]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	4a38      	ldr	r2, [pc, #224]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001796:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80a1 	beq.w	80018e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017a2:	4b34      	ldr	r3, [pc, #208]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d05c      	beq.n	8001868 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d141      	bne.n	800183a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4b31      	ldr	r3, [pc, #196]	; (800187c <HAL_RCC_OscConfig+0x478>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff faca 	bl	8000d54 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff fac6 	bl	8000d54 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e087      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d6:	4b27      	ldr	r3, [pc, #156]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69da      	ldr	r2, [r3, #28]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	019b      	lsls	r3, r3, #6
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	3b01      	subs	r3, #1
 80017fc:	041b      	lsls	r3, r3, #16
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	061b      	lsls	r3, r3, #24
 8001806:	491b      	ldr	r1, [pc, #108]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_RCC_OscConfig+0x478>)
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7ff fa9f 	bl	8000d54 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181a:	f7ff fa9b 	bl	8000d54 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e05c      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x416>
 8001838:	e054      	b.n	80018e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_RCC_OscConfig+0x478>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fa88 	bl	8000d54 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff fa84 	bl	8000d54 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e045      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_RCC_OscConfig+0x470>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x444>
 8001866:	e03d      	b.n	80018e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d107      	bne.n	8001880 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e038      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
 8001874:	40023800 	.word	0x40023800
 8001878:	40007000 	.word	0x40007000
 800187c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_RCC_OscConfig+0x4ec>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d028      	beq.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d121      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d11a      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018b0:	4013      	ands	r3, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d111      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	3b01      	subs	r3, #1
 80018ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d107      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0cc      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b68      	ldr	r3, [pc, #416]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d90c      	bls.n	8001930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b65      	ldr	r3, [pc, #404]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b63      	ldr	r3, [pc, #396]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0b8      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001948:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001960:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a52      	ldr	r2, [pc, #328]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800196a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196c:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	494d      	ldr	r1, [pc, #308]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d044      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d119      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e07f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e06f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e067      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f023 0203 	bic.w	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4934      	ldr	r1, [pc, #208]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e4:	f7ff f9b6 	bl	8000d54 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f7ff f9b2 	bl	8000d54 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e04f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 020c 	and.w	r2, r3, #12
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d1eb      	bne.n	80019ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d20c      	bcs.n	8001a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e032      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4916      	ldr	r1, [pc, #88]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	490e      	ldr	r1, [pc, #56]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a7a:	f000 f821 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	490a      	ldr	r1, [pc, #40]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	5ccb      	ldrb	r3, [r1, r3]
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f916 	bl	8000ccc <HAL_InitTick>

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	080037cc 	.word	0x080037cc
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ac4:	b090      	sub	sp, #64	; 0x40
 8001ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
 8001acc:	2300      	movs	r3, #0
 8001ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad8:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d00d      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x40>
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	f200 80a1 	bhi.w	8001c2c <HAL_RCC_GetSysClockFreq+0x16c>
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x34>
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_GetSysClockFreq+0x3a>
 8001af2:	e09b      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001af4:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x184>)
 8001af6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001af8:	e09b      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001afa:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001afe:	e098      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b00:	4b4f      	ldr	r3, [pc, #316]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b0a:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d028      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b16:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	099b      	lsrs	r3, r3, #6
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	623b      	str	r3, [r7, #32]
 8001b20:	627a      	str	r2, [r7, #36]	; 0x24
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b2c:	fb03 f201 	mul.w	r2, r3, r1
 8001b30:	2300      	movs	r3, #0
 8001b32:	fb00 f303 	mul.w	r3, r0, r3
 8001b36:	4413      	add	r3, r2
 8001b38:	4a43      	ldr	r2, [pc, #268]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b3a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b40:	460a      	mov	r2, r1
 8001b42:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b46:	4413      	add	r3, r2
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
 8001b50:	61fa      	str	r2, [r7, #28]
 8001b52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b5a:	f7fe fb3d 	bl	80001d8 <__aeabi_uldivmod>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4613      	mov	r3, r2
 8001b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b66:	e053      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	099b      	lsrs	r3, r3, #6
 8001b6e:	2200      	movs	r2, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	617a      	str	r2, [r7, #20]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b7a:	f04f 0b00 	mov.w	fp, #0
 8001b7e:	4652      	mov	r2, sl
 8001b80:	465b      	mov	r3, fp
 8001b82:	f04f 0000 	mov.w	r0, #0
 8001b86:	f04f 0100 	mov.w	r1, #0
 8001b8a:	0159      	lsls	r1, r3, #5
 8001b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b90:	0150      	lsls	r0, r2, #5
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	ebb2 080a 	subs.w	r8, r2, sl
 8001b9a:	eb63 090b 	sbc.w	r9, r3, fp
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001baa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bb2:	ebb2 0408 	subs.w	r4, r2, r8
 8001bb6:	eb63 0509 	sbc.w	r5, r3, r9
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	00eb      	lsls	r3, r5, #3
 8001bc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bc8:	00e2      	lsls	r2, r4, #3
 8001bca:	4614      	mov	r4, r2
 8001bcc:	461d      	mov	r5, r3
 8001bce:	eb14 030a 	adds.w	r3, r4, sl
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	eb45 030b 	adc.w	r3, r5, fp
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001be6:	4629      	mov	r1, r5
 8001be8:	028b      	lsls	r3, r1, #10
 8001bea:	4621      	mov	r1, r4
 8001bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	028a      	lsls	r2, r1, #10
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	60fa      	str	r2, [r7, #12]
 8001c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c04:	f7fe fae8 	bl	80001d8 <__aeabi_uldivmod>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001c20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c2a:	e002      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3740      	adds	r7, #64	; 0x40
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	00f42400 	.word	0x00f42400
 8001c48:	017d7840 	.word	0x017d7840

08001c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000

08001c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c68:	f7ff fff0 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0a9b      	lsrs	r3, r3, #10
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4903      	ldr	r1, [pc, #12]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	080037dc 	.word	0x080037dc

08001c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c90:	f7ff ffdc 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0b5b      	lsrs	r3, r3, #13
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4903      	ldr	r1, [pc, #12]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	080037dc 	.word	0x080037dc

08001cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e041      	b.n	8001d4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d106      	bne.n	8001ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7fe fe9a 	bl	8000a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	f000 fa06 	bl	8002104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e041      	b.n	8001de8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d106      	bne.n	8001d7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7fe fe6d 	bl	8000a58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2202      	movs	r2, #2
 8001d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4610      	mov	r0, r2
 8001d92:	f000 f9b7 	bl	8002104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e0ae      	b.n	8001f6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b0c      	cmp	r3, #12
 8001e1a:	f200 809f 	bhi.w	8001f5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e1e:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e24:	08001e59 	.word	0x08001e59
 8001e28:	08001f5d 	.word	0x08001f5d
 8001e2c:	08001f5d 	.word	0x08001f5d
 8001e30:	08001f5d 	.word	0x08001f5d
 8001e34:	08001e99 	.word	0x08001e99
 8001e38:	08001f5d 	.word	0x08001f5d
 8001e3c:	08001f5d 	.word	0x08001f5d
 8001e40:	08001f5d 	.word	0x08001f5d
 8001e44:	08001edb 	.word	0x08001edb
 8001e48:	08001f5d 	.word	0x08001f5d
 8001e4c:	08001f5d 	.word	0x08001f5d
 8001e50:	08001f5d 	.word	0x08001f5d
 8001e54:	08001f1b 	.word	0x08001f1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f9d0 	bl	8002204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0208 	orr.w	r2, r2, #8
 8001e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0204 	bic.w	r2, r2, #4
 8001e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6999      	ldr	r1, [r3, #24]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	619a      	str	r2, [r3, #24]
      break;
 8001e96:	e064      	b.n	8001f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fa16 	bl	80022d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6999      	ldr	r1, [r3, #24]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	021a      	lsls	r2, r3, #8
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	619a      	str	r2, [r3, #24]
      break;
 8001ed8:	e043      	b.n	8001f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 fa61 	bl	80023a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69da      	ldr	r2, [r3, #28]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0208 	orr.w	r2, r2, #8
 8001ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69da      	ldr	r2, [r3, #28]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0204 	bic.w	r2, r2, #4
 8001f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	69d9      	ldr	r1, [r3, #28]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	61da      	str	r2, [r3, #28]
      break;
 8001f18:	e023      	b.n	8001f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 faab 	bl	800247c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69da      	ldr	r2, [r3, #28]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	69da      	ldr	r2, [r3, #28]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	69d9      	ldr	r1, [r3, #28]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	021a      	lsls	r2, r3, #8
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	61da      	str	r2, [r3, #28]
      break;
 8001f5a:	e002      	b.n	8001f62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8001f60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <HAL_TIM_ConfigClockSource+0x1c>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e0b4      	b.n	80020fa <HAL_TIM_ConfigClockSource+0x186>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fc8:	d03e      	beq.n	8002048 <HAL_TIM_ConfigClockSource+0xd4>
 8001fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fce:	f200 8087 	bhi.w	80020e0 <HAL_TIM_ConfigClockSource+0x16c>
 8001fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd6:	f000 8086 	beq.w	80020e6 <HAL_TIM_ConfigClockSource+0x172>
 8001fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fde:	d87f      	bhi.n	80020e0 <HAL_TIM_ConfigClockSource+0x16c>
 8001fe0:	2b70      	cmp	r3, #112	; 0x70
 8001fe2:	d01a      	beq.n	800201a <HAL_TIM_ConfigClockSource+0xa6>
 8001fe4:	2b70      	cmp	r3, #112	; 0x70
 8001fe6:	d87b      	bhi.n	80020e0 <HAL_TIM_ConfigClockSource+0x16c>
 8001fe8:	2b60      	cmp	r3, #96	; 0x60
 8001fea:	d050      	beq.n	800208e <HAL_TIM_ConfigClockSource+0x11a>
 8001fec:	2b60      	cmp	r3, #96	; 0x60
 8001fee:	d877      	bhi.n	80020e0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ff0:	2b50      	cmp	r3, #80	; 0x50
 8001ff2:	d03c      	beq.n	800206e <HAL_TIM_ConfigClockSource+0xfa>
 8001ff4:	2b50      	cmp	r3, #80	; 0x50
 8001ff6:	d873      	bhi.n	80020e0 <HAL_TIM_ConfigClockSource+0x16c>
 8001ff8:	2b40      	cmp	r3, #64	; 0x40
 8001ffa:	d058      	beq.n	80020ae <HAL_TIM_ConfigClockSource+0x13a>
 8001ffc:	2b40      	cmp	r3, #64	; 0x40
 8001ffe:	d86f      	bhi.n	80020e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002000:	2b30      	cmp	r3, #48	; 0x30
 8002002:	d064      	beq.n	80020ce <HAL_TIM_ConfigClockSource+0x15a>
 8002004:	2b30      	cmp	r3, #48	; 0x30
 8002006:	d86b      	bhi.n	80020e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002008:	2b20      	cmp	r3, #32
 800200a:	d060      	beq.n	80020ce <HAL_TIM_ConfigClockSource+0x15a>
 800200c:	2b20      	cmp	r3, #32
 800200e:	d867      	bhi.n	80020e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002010:	2b00      	cmp	r3, #0
 8002012:	d05c      	beq.n	80020ce <HAL_TIM_ConfigClockSource+0x15a>
 8002014:	2b10      	cmp	r3, #16
 8002016:	d05a      	beq.n	80020ce <HAL_TIM_ConfigClockSource+0x15a>
 8002018:	e062      	b.n	80020e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6899      	ldr	r1, [r3, #8]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f000 faf1 	bl	8002610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800203c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	609a      	str	r2, [r3, #8]
      break;
 8002046:	e04f      	b.n	80020e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6899      	ldr	r1, [r3, #8]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f000 fada 	bl	8002610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800206a:	609a      	str	r2, [r3, #8]
      break;
 800206c:	e03c      	b.n	80020e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6859      	ldr	r1, [r3, #4]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	461a      	mov	r2, r3
 800207c:	f000 fa4e 	bl	800251c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2150      	movs	r1, #80	; 0x50
 8002086:	4618      	mov	r0, r3
 8002088:	f000 faa7 	bl	80025da <TIM_ITRx_SetConfig>
      break;
 800208c:	e02c      	b.n	80020e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	6859      	ldr	r1, [r3, #4]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	461a      	mov	r2, r3
 800209c:	f000 fa6d 	bl	800257a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2160      	movs	r1, #96	; 0x60
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fa97 	bl	80025da <TIM_ITRx_SetConfig>
      break;
 80020ac:	e01c      	b.n	80020e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	461a      	mov	r2, r3
 80020bc:	f000 fa2e 	bl	800251c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2140      	movs	r1, #64	; 0x40
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fa87 	bl	80025da <TIM_ITRx_SetConfig>
      break;
 80020cc:	e00c      	b.n	80020e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4619      	mov	r1, r3
 80020d8:	4610      	mov	r0, r2
 80020da:	f000 fa7e 	bl	80025da <TIM_ITRx_SetConfig>
      break;
 80020de:	e003      	b.n	80020e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
      break;
 80020e4:	e000      	b.n	80020e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80020e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a34      	ldr	r2, [pc, #208]	; (80021e8 <TIM_Base_SetConfig+0xe4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00f      	beq.n	800213c <TIM_Base_SetConfig+0x38>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002122:	d00b      	beq.n	800213c <TIM_Base_SetConfig+0x38>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a31      	ldr	r2, [pc, #196]	; (80021ec <TIM_Base_SetConfig+0xe8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d007      	beq.n	800213c <TIM_Base_SetConfig+0x38>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a30      	ldr	r2, [pc, #192]	; (80021f0 <TIM_Base_SetConfig+0xec>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d003      	beq.n	800213c <TIM_Base_SetConfig+0x38>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a2f      	ldr	r2, [pc, #188]	; (80021f4 <TIM_Base_SetConfig+0xf0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d108      	bne.n	800214e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a25      	ldr	r2, [pc, #148]	; (80021e8 <TIM_Base_SetConfig+0xe4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01b      	beq.n	800218e <TIM_Base_SetConfig+0x8a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215c:	d017      	beq.n	800218e <TIM_Base_SetConfig+0x8a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a22      	ldr	r2, [pc, #136]	; (80021ec <TIM_Base_SetConfig+0xe8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <TIM_Base_SetConfig+0x8a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a21      	ldr	r2, [pc, #132]	; (80021f0 <TIM_Base_SetConfig+0xec>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00f      	beq.n	800218e <TIM_Base_SetConfig+0x8a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a20      	ldr	r2, [pc, #128]	; (80021f4 <TIM_Base_SetConfig+0xf0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00b      	beq.n	800218e <TIM_Base_SetConfig+0x8a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <TIM_Base_SetConfig+0xf4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d007      	beq.n	800218e <TIM_Base_SetConfig+0x8a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <TIM_Base_SetConfig+0xf8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d003      	beq.n	800218e <TIM_Base_SetConfig+0x8a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <TIM_Base_SetConfig+0xfc>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d108      	bne.n	80021a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <TIM_Base_SetConfig+0xe4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d103      	bne.n	80021d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	615a      	str	r2, [r3, #20]
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40010000 	.word	0x40010000
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40000800 	.word	0x40000800
 80021f4:	40000c00 	.word	0x40000c00
 80021f8:	40014000 	.word	0x40014000
 80021fc:	40014400 	.word	0x40014400
 8002200:	40014800 	.word	0x40014800

08002204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	f023 0201 	bic.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f023 0303 	bic.w	r3, r3, #3
 800223a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f023 0302 	bic.w	r3, r3, #2
 800224c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <TIM_OC1_SetConfig+0xc8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d10c      	bne.n	800227a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f023 0308 	bic.w	r3, r3, #8
 8002266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	4313      	orrs	r3, r2
 8002270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a13      	ldr	r2, [pc, #76]	; (80022cc <TIM_OC1_SetConfig+0xc8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d111      	bne.n	80022a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	621a      	str	r2, [r3, #32]
}
 80022c0:	bf00      	nop
 80022c2:	371c      	adds	r7, #28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40010000 	.word	0x40010000

080022d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	f023 0210 	bic.w	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f023 0320 	bic.w	r3, r3, #32
 800231a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4313      	orrs	r3, r2
 8002326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a1e      	ldr	r2, [pc, #120]	; (80023a4 <TIM_OC2_SetConfig+0xd4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d10d      	bne.n	800234c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4313      	orrs	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800234a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a15      	ldr	r2, [pc, #84]	; (80023a4 <TIM_OC2_SetConfig+0xd4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d113      	bne.n	800237c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800235a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002362:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	621a      	str	r2, [r3, #32]
}
 8002396:	bf00      	nop
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40010000 	.word	0x40010000

080023a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0303 	bic.w	r3, r3, #3
 80023de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <TIM_OC3_SetConfig+0xd0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d10d      	bne.n	8002422 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800240c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	4313      	orrs	r3, r2
 8002418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a14      	ldr	r2, [pc, #80]	; (8002478 <TIM_OC3_SetConfig+0xd0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d113      	bne.n	8002452 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	621a      	str	r2, [r3, #32]
}
 800246c:	bf00      	nop
 800246e:	371c      	adds	r7, #28
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40010000 	.word	0x40010000

0800247c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	031b      	lsls	r3, r3, #12
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a10      	ldr	r2, [pc, #64]	; (8002518 <TIM_OC4_SetConfig+0x9c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d109      	bne.n	80024f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	019b      	lsls	r3, r3, #6
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	621a      	str	r2, [r3, #32]
}
 800250a:	bf00      	nop
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40010000 	.word	0x40010000

0800251c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	f023 0201 	bic.w	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f023 030a 	bic.w	r3, r3, #10
 8002558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	621a      	str	r2, [r3, #32]
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800257a:	b480      	push	{r7}
 800257c:	b087      	sub	sp, #28
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	f023 0210 	bic.w	r2, r3, #16
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	031b      	lsls	r3, r3, #12
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	621a      	str	r2, [r3, #32]
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025da:	b480      	push	{r7}
 80025dc:	b085      	sub	sp, #20
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f043 0307 	orr.w	r3, r3, #7
 80025fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	609a      	str	r2, [r3, #8]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
 800261c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800262a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	021a      	lsls	r2, r3, #8
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	431a      	orrs	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	4313      	orrs	r3, r2
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	609a      	str	r2, [r3, #8]
}
 8002644:	bf00      	nop
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002664:	2302      	movs	r3, #2
 8002666:	e050      	b.n	800270a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d018      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b4:	d013      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a18      	ldr	r2, [pc, #96]	; (800271c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d00e      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a16      	ldr	r2, [pc, #88]	; (8002720 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d009      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a15      	ldr	r2, [pc, #84]	; (8002724 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d004      	beq.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a13      	ldr	r2, [pc, #76]	; (8002728 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10c      	bne.n	80026f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40010000 	.word	0x40010000
 800271c:	40000400 	.word	0x40000400
 8002720:	40000800 	.word	0x40000800
 8002724:	40000c00 	.word	0x40000c00
 8002728:	40014000 	.word	0x40014000

0800272c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e03f      	b.n	80027be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d106      	bne.n	8002758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7fe f9d8 	bl	8000b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2224      	movs	r2, #36	; 0x24
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800276e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fd7b 	bl	800326c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b08a      	sub	sp, #40	; 0x28
 80027ca:	af02      	add	r7, sp, #8
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4613      	mov	r3, r2
 80027d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d17c      	bne.n	80028e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_UART_Transmit+0x2c>
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e075      	b.n	80028e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_UART_Transmit+0x3e>
 8002800:	2302      	movs	r3, #2
 8002802:	e06e      	b.n	80028e2 <HAL_UART_Transmit+0x11c>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2221      	movs	r2, #33	; 0x21
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800281a:	f7fe fa9b 	bl	8000d54 <HAL_GetTick>
 800281e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	88fa      	ldrh	r2, [r7, #6]
 800282a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002834:	d108      	bne.n	8002848 <HAL_UART_Transmit+0x82>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d104      	bne.n	8002848 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	e003      	b.n	8002850 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002858:	e02a      	b.n	80028b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2200      	movs	r2, #0
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 faf9 	bl	8002e5c <UART_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e036      	b.n	80028e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10b      	bne.n	8002892 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002888:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	3302      	adds	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
 8002890:	e007      	b.n	80028a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	3301      	adds	r3, #1
 80028a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1cf      	bne.n	800285a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2200      	movs	r2, #0
 80028c2:	2140      	movs	r1, #64	; 0x40
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fac9 	bl	8002e5c <UART_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e006      	b.n	80028e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b0ba      	sub	sp, #232	; 0xe8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002918:	2300      	movs	r3, #0
 800291a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800291e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800292a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10f      	bne.n	8002952 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <HAL_UART_IRQHandler+0x66>
 800293e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fbd3 	bl	80030f6 <UART_Receive_IT>
      return;
 8002950:	e256      	b.n	8002e00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 80de 	beq.w	8002b18 <HAL_UART_IRQHandler+0x22c>
 800295c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d106      	bne.n	8002976 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800296c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80d1 	beq.w	8002b18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <HAL_UART_IRQHandler+0xae>
 8002982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f043 0201 	orr.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800299a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <HAL_UART_IRQHandler+0xd2>
 80029a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f043 0202 	orr.w	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_UART_IRQHandler+0xf6>
 80029ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f043 0204 	orr.w	r2, r3, #4
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d011      	beq.n	8002a12 <HAL_UART_IRQHandler+0x126>
 80029ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f043 0208 	orr.w	r2, r3, #8
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 81ed 	beq.w	8002df6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a20:	f003 0320 	and.w	r3, r3, #32
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_UART_IRQHandler+0x14e>
 8002a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fb5e 	bl	80030f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d103      	bne.n	8002a66 <HAL_UART_IRQHandler+0x17a>
 8002a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d04f      	beq.n	8002b06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fa66 	bl	8002f38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d141      	bne.n	8002afe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3314      	adds	r3, #20
 8002a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a88:	e853 3f00 	ldrex	r3, [r3]
 8002a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3314      	adds	r3, #20
 8002aa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002aa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ab6:	e841 2300 	strex	r3, r2, [r1]
 8002aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1d9      	bne.n	8002a7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d013      	beq.n	8002af6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	4a7d      	ldr	r2, [pc, #500]	; (8002cc8 <HAL_UART_IRQHandler+0x3dc>)
 8002ad4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe faeb 	bl	80010b6 <HAL_DMA_Abort_IT>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d016      	beq.n	8002b14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002af0:	4610      	mov	r0, r2
 8002af2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af4:	e00e      	b.n	8002b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f99a 	bl	8002e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002afc:	e00a      	b.n	8002b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f996 	bl	8002e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b04:	e006      	b.n	8002b14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f992 	bl	8002e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b12:	e170      	b.n	8002df6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b14:	bf00      	nop
    return;
 8002b16:	e16e      	b.n	8002df6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	f040 814a 	bne.w	8002db6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8143 	beq.w	8002db6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 813c 	beq.w	8002db6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5e:	2b40      	cmp	r3, #64	; 0x40
 8002b60:	f040 80b4 	bne.w	8002ccc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8140 	beq.w	8002dfa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b82:	429a      	cmp	r2, r3
 8002b84:	f080 8139 	bcs.w	8002dfa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b9a:	f000 8088 	beq.w	8002cae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	330c      	adds	r3, #12
 8002ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bac:	e853 3f00 	ldrex	r3, [r3]
 8002bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002bb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002bca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bda:	e841 2300 	strex	r3, r2, [r1]
 8002bde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1d9      	bne.n	8002b9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3314      	adds	r3, #20
 8002bf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf4:	e853 3f00 	ldrex	r3, [r3]
 8002bf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3314      	adds	r3, #20
 8002c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c1a:	e841 2300 	strex	r3, r2, [r1]
 8002c1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1e1      	bne.n	8002bea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3314      	adds	r3, #20
 8002c2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c30:	e853 3f00 	ldrex	r3, [r3]
 8002c34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3314      	adds	r3, #20
 8002c46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c52:	e841 2300 	strex	r3, r2, [r1]
 8002c56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1e3      	bne.n	8002c26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c76:	e853 3f00 	ldrex	r3, [r3]
 8002c7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c7e:	f023 0310 	bic.w	r3, r3, #16
 8002c82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c90:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c98:	e841 2300 	strex	r3, r2, [r1]
 8002c9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1e3      	bne.n	8002c6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe f994 	bl	8000fd6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8c0 	bl	8002e44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cc4:	e099      	b.n	8002dfa <HAL_UART_IRQHandler+0x50e>
 8002cc6:	bf00      	nop
 8002cc8:	08002fff 	.word	0x08002fff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 808b 	beq.w	8002dfe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8086 	beq.w	8002dfe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	330c      	adds	r3, #12
 8002cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfc:	e853 3f00 	ldrex	r3, [r3]
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	330c      	adds	r3, #12
 8002d12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d16:	647a      	str	r2, [r7, #68]	; 0x44
 8002d18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d1e:	e841 2300 	strex	r3, r2, [r1]
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1e3      	bne.n	8002cf2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3314      	adds	r3, #20
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	623b      	str	r3, [r7, #32]
   return(result);
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3314      	adds	r3, #20
 8002d4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d4e:	633a      	str	r2, [r7, #48]	; 0x30
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d56:	e841 2300 	strex	r3, r2, [r1]
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1e3      	bne.n	8002d2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	330c      	adds	r3, #12
 8002d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	e853 3f00 	ldrex	r3, [r3]
 8002d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0310 	bic.w	r3, r3, #16
 8002d86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	330c      	adds	r3, #12
 8002d90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d94:	61fa      	str	r2, [r7, #28]
 8002d96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d98:	69b9      	ldr	r1, [r7, #24]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	e841 2300 	strex	r3, r2, [r1]
 8002da0:	617b      	str	r3, [r7, #20]
   return(result);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e3      	bne.n	8002d70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002da8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dac:	4619      	mov	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f848 	bl	8002e44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002db4:	e023      	b.n	8002dfe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x4ea>
 8002dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f929 	bl	8003026 <UART_Transmit_IT>
    return;
 8002dd4:	e014      	b.n	8002e00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00e      	beq.n	8002e00 <HAL_UART_IRQHandler+0x514>
 8002de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f969 	bl	80030c6 <UART_EndTransmit_IT>
    return;
 8002df4:	e004      	b.n	8002e00 <HAL_UART_IRQHandler+0x514>
    return;
 8002df6:	bf00      	nop
 8002df8:	e002      	b.n	8002e00 <HAL_UART_IRQHandler+0x514>
      return;
 8002dfa:	bf00      	nop
 8002dfc:	e000      	b.n	8002e00 <HAL_UART_IRQHandler+0x514>
      return;
 8002dfe:	bf00      	nop
  }
}
 8002e00:	37e8      	adds	r7, #232	; 0xe8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop

08002e08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b090      	sub	sp, #64	; 0x40
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e6c:	e050      	b.n	8002f10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e74:	d04c      	beq.n	8002f10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e7c:	f7fd ff6a 	bl	8000d54 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d241      	bcs.n	8002f10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eac:	637a      	str	r2, [r7, #52]	; 0x34
 8002eae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e5      	bne.n	8002e8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3314      	adds	r3, #20
 8002ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	e853 3f00 	ldrex	r3, [r3]
 8002ece:	613b      	str	r3, [r7, #16]
   return(result);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3314      	adds	r3, #20
 8002ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ee0:	623a      	str	r2, [r7, #32]
 8002ee2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee4:	69f9      	ldr	r1, [r7, #28]
 8002ee6:	6a3a      	ldr	r2, [r7, #32]
 8002ee8:	e841 2300 	strex	r3, r2, [r1]
 8002eec:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e5      	bne.n	8002ec0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e00f      	b.n	8002f30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d09f      	beq.n	8002e6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3740      	adds	r7, #64	; 0x40
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b095      	sub	sp, #84	; 0x54
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4a:	e853 3f00 	ldrex	r3, [r3]
 8002f4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	330c      	adds	r3, #12
 8002f5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f60:	643a      	str	r2, [r7, #64]	; 0x40
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f68:	e841 2300 	strex	r3, r2, [r1]
 8002f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e5      	bne.n	8002f40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3314      	adds	r3, #20
 8002f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	e853 3f00 	ldrex	r3, [r3]
 8002f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3314      	adds	r3, #20
 8002f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9c:	e841 2300 	strex	r3, r2, [r1]
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1e5      	bne.n	8002f74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d119      	bne.n	8002fe4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	330c      	adds	r3, #12
 8002fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	e853 3f00 	ldrex	r3, [r3]
 8002fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f023 0310 	bic.w	r3, r3, #16
 8002fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fd0:	61ba      	str	r2, [r7, #24]
 8002fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd4:	6979      	ldr	r1, [r7, #20]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	e841 2300 	strex	r3, r2, [r1]
 8002fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e5      	bne.n	8002fb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ff2:	bf00      	nop
 8002ff4:	3754      	adds	r7, #84	; 0x54
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f7ff ff09 	bl	8002e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b21      	cmp	r3, #33	; 0x21
 8003038:	d13e      	bne.n	80030b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003042:	d114      	bne.n	800306e <UART_Transmit_IT+0x48>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d110      	bne.n	800306e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003060:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	1c9a      	adds	r2, r3, #2
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	621a      	str	r2, [r3, #32]
 800306c:	e008      	b.n	8003080 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	1c59      	adds	r1, r3, #1
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6211      	str	r1, [r2, #32]
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29b      	uxth	r3, r3
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4619      	mov	r1, r3
 800308e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10f      	bne.n	80030b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e000      	b.n	80030ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030b8:	2302      	movs	r3, #2
  }
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff fe8e 	bl	8002e08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b08c      	sub	sp, #48	; 0x30
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b22      	cmp	r3, #34	; 0x22
 8003108:	f040 80ab 	bne.w	8003262 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003114:	d117      	bne.n	8003146 <UART_Receive_IT+0x50>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d113      	bne.n	8003146 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800311e:	2300      	movs	r3, #0
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	b29b      	uxth	r3, r3
 8003130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003134:	b29a      	uxth	r2, r3
 8003136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003138:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	1c9a      	adds	r2, r3, #2
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	629a      	str	r2, [r3, #40]	; 0x28
 8003144:	e026      	b.n	8003194 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800314c:	2300      	movs	r3, #0
 800314e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003158:	d007      	beq.n	800316a <UART_Receive_IT+0x74>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <UART_Receive_IT+0x82>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e008      	b.n	800318a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003184:	b2da      	uxtb	r2, r3
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29b      	uxth	r3, r3
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4619      	mov	r1, r3
 80031a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d15a      	bne.n	800325e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0220 	bic.w	r2, r2, #32
 80031b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0201 	bic.w	r2, r2, #1
 80031d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d135      	bne.n	8003254 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	330c      	adds	r3, #12
 80031f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	613b      	str	r3, [r7, #16]
   return(result);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f023 0310 	bic.w	r3, r3, #16
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	330c      	adds	r3, #12
 800320c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320e:	623a      	str	r2, [r7, #32]
 8003210:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	69f9      	ldr	r1, [r7, #28]
 8003214:	6a3a      	ldr	r2, [r7, #32]
 8003216:	e841 2300 	strex	r3, r2, [r1]
 800321a:	61bb      	str	r3, [r7, #24]
   return(result);
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e5      	bne.n	80031ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b10      	cmp	r3, #16
 800322e:	d10a      	bne.n	8003246 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800324a:	4619      	mov	r1, r3
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff fdf9 	bl	8002e44 <HAL_UARTEx_RxEventCallback>
 8003252:	e002      	b.n	800325a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fde1 	bl	8002e1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	e002      	b.n	8003264 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e000      	b.n	8003264 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003262:	2302      	movs	r3, #2
  }
}
 8003264:	4618      	mov	r0, r3
 8003266:	3730      	adds	r7, #48	; 0x30
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800326c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003270:	b0c0      	sub	sp, #256	; 0x100
 8003272:	af00      	add	r7, sp, #0
 8003274:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003288:	68d9      	ldr	r1, [r3, #12]
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	ea40 0301 	orr.w	r3, r0, r1
 8003294:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032c4:	f021 010c 	bic.w	r1, r1, #12
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032d2:	430b      	orrs	r3, r1
 80032d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e6:	6999      	ldr	r1, [r3, #24]
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	ea40 0301 	orr.w	r3, r0, r1
 80032f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b8f      	ldr	r3, [pc, #572]	; (8003538 <UART_SetConfig+0x2cc>)
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d005      	beq.n	800330c <UART_SetConfig+0xa0>
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b8d      	ldr	r3, [pc, #564]	; (800353c <UART_SetConfig+0x2d0>)
 8003308:	429a      	cmp	r2, r3
 800330a:	d104      	bne.n	8003316 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800330c:	f7fe fcbe 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8003310:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003314:	e003      	b.n	800331e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003316:	f7fe fca5 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 800331a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800331e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003328:	f040 810c 	bne.w	8003544 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800332c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003330:	2200      	movs	r2, #0
 8003332:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003336:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800333a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800333e:	4622      	mov	r2, r4
 8003340:	462b      	mov	r3, r5
 8003342:	1891      	adds	r1, r2, r2
 8003344:	65b9      	str	r1, [r7, #88]	; 0x58
 8003346:	415b      	adcs	r3, r3
 8003348:	65fb      	str	r3, [r7, #92]	; 0x5c
 800334a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800334e:	4621      	mov	r1, r4
 8003350:	eb12 0801 	adds.w	r8, r2, r1
 8003354:	4629      	mov	r1, r5
 8003356:	eb43 0901 	adc.w	r9, r3, r1
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800336a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800336e:	4690      	mov	r8, r2
 8003370:	4699      	mov	r9, r3
 8003372:	4623      	mov	r3, r4
 8003374:	eb18 0303 	adds.w	r3, r8, r3
 8003378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800337c:	462b      	mov	r3, r5
 800337e:	eb49 0303 	adc.w	r3, r9, r3
 8003382:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003392:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003396:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800339a:	460b      	mov	r3, r1
 800339c:	18db      	adds	r3, r3, r3
 800339e:	653b      	str	r3, [r7, #80]	; 0x50
 80033a0:	4613      	mov	r3, r2
 80033a2:	eb42 0303 	adc.w	r3, r2, r3
 80033a6:	657b      	str	r3, [r7, #84]	; 0x54
 80033a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033b0:	f7fc ff12 	bl	80001d8 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4b61      	ldr	r3, [pc, #388]	; (8003540 <UART_SetConfig+0x2d4>)
 80033ba:	fba3 2302 	umull	r2, r3, r3, r2
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	011c      	lsls	r4, r3, #4
 80033c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033d4:	4642      	mov	r2, r8
 80033d6:	464b      	mov	r3, r9
 80033d8:	1891      	adds	r1, r2, r2
 80033da:	64b9      	str	r1, [r7, #72]	; 0x48
 80033dc:	415b      	adcs	r3, r3
 80033de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033e4:	4641      	mov	r1, r8
 80033e6:	eb12 0a01 	adds.w	sl, r2, r1
 80033ea:	4649      	mov	r1, r9
 80033ec:	eb43 0b01 	adc.w	fp, r3, r1
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003400:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003404:	4692      	mov	sl, r2
 8003406:	469b      	mov	fp, r3
 8003408:	4643      	mov	r3, r8
 800340a:	eb1a 0303 	adds.w	r3, sl, r3
 800340e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003412:	464b      	mov	r3, r9
 8003414:	eb4b 0303 	adc.w	r3, fp, r3
 8003418:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003428:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800342c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003430:	460b      	mov	r3, r1
 8003432:	18db      	adds	r3, r3, r3
 8003434:	643b      	str	r3, [r7, #64]	; 0x40
 8003436:	4613      	mov	r3, r2
 8003438:	eb42 0303 	adc.w	r3, r2, r3
 800343c:	647b      	str	r3, [r7, #68]	; 0x44
 800343e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003442:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003446:	f7fc fec7 	bl	80001d8 <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4611      	mov	r1, r2
 8003450:	4b3b      	ldr	r3, [pc, #236]	; (8003540 <UART_SetConfig+0x2d4>)
 8003452:	fba3 2301 	umull	r2, r3, r3, r1
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2264      	movs	r2, #100	; 0x64
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	1acb      	subs	r3, r1, r3
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003466:	4b36      	ldr	r3, [pc, #216]	; (8003540 <UART_SetConfig+0x2d4>)
 8003468:	fba3 2302 	umull	r2, r3, r3, r2
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003474:	441c      	add	r4, r3
 8003476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800347a:	2200      	movs	r2, #0
 800347c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003480:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003484:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003488:	4642      	mov	r2, r8
 800348a:	464b      	mov	r3, r9
 800348c:	1891      	adds	r1, r2, r2
 800348e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003490:	415b      	adcs	r3, r3
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003494:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003498:	4641      	mov	r1, r8
 800349a:	1851      	adds	r1, r2, r1
 800349c:	6339      	str	r1, [r7, #48]	; 0x30
 800349e:	4649      	mov	r1, r9
 80034a0:	414b      	adcs	r3, r1
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034b0:	4659      	mov	r1, fp
 80034b2:	00cb      	lsls	r3, r1, #3
 80034b4:	4651      	mov	r1, sl
 80034b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ba:	4651      	mov	r1, sl
 80034bc:	00ca      	lsls	r2, r1, #3
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	4642      	mov	r2, r8
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034cc:	464b      	mov	r3, r9
 80034ce:	460a      	mov	r2, r1
 80034d0:	eb42 0303 	adc.w	r3, r2, r3
 80034d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034ec:	460b      	mov	r3, r1
 80034ee:	18db      	adds	r3, r3, r3
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f2:	4613      	mov	r3, r2
 80034f4:	eb42 0303 	adc.w	r3, r2, r3
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003502:	f7fc fe69 	bl	80001d8 <__aeabi_uldivmod>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <UART_SetConfig+0x2d4>)
 800350c:	fba3 1302 	umull	r1, r3, r3, r2
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	2164      	movs	r1, #100	; 0x64
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	3332      	adds	r3, #50	; 0x32
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <UART_SetConfig+0x2d4>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	f003 0207 	and.w	r2, r3, #7
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4422      	add	r2, r4
 8003532:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003534:	e105      	b.n	8003742 <UART_SetConfig+0x4d6>
 8003536:	bf00      	nop
 8003538:	40011000 	.word	0x40011000
 800353c:	40011400 	.word	0x40011400
 8003540:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003548:	2200      	movs	r2, #0
 800354a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800354e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003552:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003556:	4642      	mov	r2, r8
 8003558:	464b      	mov	r3, r9
 800355a:	1891      	adds	r1, r2, r2
 800355c:	6239      	str	r1, [r7, #32]
 800355e:	415b      	adcs	r3, r3
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
 8003562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003566:	4641      	mov	r1, r8
 8003568:	1854      	adds	r4, r2, r1
 800356a:	4649      	mov	r1, r9
 800356c:	eb43 0501 	adc.w	r5, r3, r1
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	00eb      	lsls	r3, r5, #3
 800357a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800357e:	00e2      	lsls	r2, r4, #3
 8003580:	4614      	mov	r4, r2
 8003582:	461d      	mov	r5, r3
 8003584:	4643      	mov	r3, r8
 8003586:	18e3      	adds	r3, r4, r3
 8003588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800358c:	464b      	mov	r3, r9
 800358e:	eb45 0303 	adc.w	r3, r5, r3
 8003592:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035b2:	4629      	mov	r1, r5
 80035b4:	008b      	lsls	r3, r1, #2
 80035b6:	4621      	mov	r1, r4
 80035b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035bc:	4621      	mov	r1, r4
 80035be:	008a      	lsls	r2, r1, #2
 80035c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035c4:	f7fc fe08 	bl	80001d8 <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4b60      	ldr	r3, [pc, #384]	; (8003750 <UART_SetConfig+0x4e4>)
 80035ce:	fba3 2302 	umull	r2, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	011c      	lsls	r4, r3, #4
 80035d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035e8:	4642      	mov	r2, r8
 80035ea:	464b      	mov	r3, r9
 80035ec:	1891      	adds	r1, r2, r2
 80035ee:	61b9      	str	r1, [r7, #24]
 80035f0:	415b      	adcs	r3, r3
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f8:	4641      	mov	r1, r8
 80035fa:	1851      	adds	r1, r2, r1
 80035fc:	6139      	str	r1, [r7, #16]
 80035fe:	4649      	mov	r1, r9
 8003600:	414b      	adcs	r3, r1
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003610:	4659      	mov	r1, fp
 8003612:	00cb      	lsls	r3, r1, #3
 8003614:	4651      	mov	r1, sl
 8003616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800361a:	4651      	mov	r1, sl
 800361c:	00ca      	lsls	r2, r1, #3
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	4603      	mov	r3, r0
 8003624:	4642      	mov	r2, r8
 8003626:	189b      	adds	r3, r3, r2
 8003628:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800362c:	464b      	mov	r3, r9
 800362e:	460a      	mov	r2, r1
 8003630:	eb42 0303 	adc.w	r3, r2, r3
 8003634:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	67bb      	str	r3, [r7, #120]	; 0x78
 8003642:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003650:	4649      	mov	r1, r9
 8003652:	008b      	lsls	r3, r1, #2
 8003654:	4641      	mov	r1, r8
 8003656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800365a:	4641      	mov	r1, r8
 800365c:	008a      	lsls	r2, r1, #2
 800365e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003662:	f7fc fdb9 	bl	80001d8 <__aeabi_uldivmod>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4b39      	ldr	r3, [pc, #228]	; (8003750 <UART_SetConfig+0x4e4>)
 800366c:	fba3 1302 	umull	r1, r3, r3, r2
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	2164      	movs	r1, #100	; 0x64
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	3332      	adds	r3, #50	; 0x32
 800367e:	4a34      	ldr	r2, [pc, #208]	; (8003750 <UART_SetConfig+0x4e4>)
 8003680:	fba2 2303 	umull	r2, r3, r2, r3
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800368a:	441c      	add	r4, r3
 800368c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003690:	2200      	movs	r2, #0
 8003692:	673b      	str	r3, [r7, #112]	; 0x70
 8003694:	677a      	str	r2, [r7, #116]	; 0x74
 8003696:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800369a:	4642      	mov	r2, r8
 800369c:	464b      	mov	r3, r9
 800369e:	1891      	adds	r1, r2, r2
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	415b      	adcs	r3, r3
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036aa:	4641      	mov	r1, r8
 80036ac:	1851      	adds	r1, r2, r1
 80036ae:	6039      	str	r1, [r7, #0]
 80036b0:	4649      	mov	r1, r9
 80036b2:	414b      	adcs	r3, r1
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036c2:	4659      	mov	r1, fp
 80036c4:	00cb      	lsls	r3, r1, #3
 80036c6:	4651      	mov	r1, sl
 80036c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036cc:	4651      	mov	r1, sl
 80036ce:	00ca      	lsls	r2, r1, #3
 80036d0:	4610      	mov	r0, r2
 80036d2:	4619      	mov	r1, r3
 80036d4:	4603      	mov	r3, r0
 80036d6:	4642      	mov	r2, r8
 80036d8:	189b      	adds	r3, r3, r2
 80036da:	66bb      	str	r3, [r7, #104]	; 0x68
 80036dc:	464b      	mov	r3, r9
 80036de:	460a      	mov	r2, r1
 80036e0:	eb42 0303 	adc.w	r3, r2, r3
 80036e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	663b      	str	r3, [r7, #96]	; 0x60
 80036f0:	667a      	str	r2, [r7, #100]	; 0x64
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036fe:	4649      	mov	r1, r9
 8003700:	008b      	lsls	r3, r1, #2
 8003702:	4641      	mov	r1, r8
 8003704:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003708:	4641      	mov	r1, r8
 800370a:	008a      	lsls	r2, r1, #2
 800370c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003710:	f7fc fd62 	bl	80001d8 <__aeabi_uldivmod>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <UART_SetConfig+0x4e4>)
 800371a:	fba3 1302 	umull	r1, r3, r3, r2
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	2164      	movs	r1, #100	; 0x64
 8003722:	fb01 f303 	mul.w	r3, r1, r3
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	3332      	adds	r3, #50	; 0x32
 800372c:	4a08      	ldr	r2, [pc, #32]	; (8003750 <UART_SetConfig+0x4e4>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	f003 020f 	and.w	r2, r3, #15
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4422      	add	r2, r4
 8003740:	609a      	str	r2, [r3, #8]
}
 8003742:	bf00      	nop
 8003744:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003748:	46bd      	mov	sp, r7
 800374a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800374e:	bf00      	nop
 8003750:	51eb851f 	.word	0x51eb851f

08003754 <__libc_init_array>:
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	4d0d      	ldr	r5, [pc, #52]	; (800378c <__libc_init_array+0x38>)
 8003758:	4c0d      	ldr	r4, [pc, #52]	; (8003790 <__libc_init_array+0x3c>)
 800375a:	1b64      	subs	r4, r4, r5
 800375c:	10a4      	asrs	r4, r4, #2
 800375e:	2600      	movs	r6, #0
 8003760:	42a6      	cmp	r6, r4
 8003762:	d109      	bne.n	8003778 <__libc_init_array+0x24>
 8003764:	4d0b      	ldr	r5, [pc, #44]	; (8003794 <__libc_init_array+0x40>)
 8003766:	4c0c      	ldr	r4, [pc, #48]	; (8003798 <__libc_init_array+0x44>)
 8003768:	f000 f820 	bl	80037ac <_init>
 800376c:	1b64      	subs	r4, r4, r5
 800376e:	10a4      	asrs	r4, r4, #2
 8003770:	2600      	movs	r6, #0
 8003772:	42a6      	cmp	r6, r4
 8003774:	d105      	bne.n	8003782 <__libc_init_array+0x2e>
 8003776:	bd70      	pop	{r4, r5, r6, pc}
 8003778:	f855 3b04 	ldr.w	r3, [r5], #4
 800377c:	4798      	blx	r3
 800377e:	3601      	adds	r6, #1
 8003780:	e7ee      	b.n	8003760 <__libc_init_array+0xc>
 8003782:	f855 3b04 	ldr.w	r3, [r5], #4
 8003786:	4798      	blx	r3
 8003788:	3601      	adds	r6, #1
 800378a:	e7f2      	b.n	8003772 <__libc_init_array+0x1e>
 800378c:	080037ec 	.word	0x080037ec
 8003790:	080037ec 	.word	0x080037ec
 8003794:	080037ec 	.word	0x080037ec
 8003798:	080037f0 	.word	0x080037f0

0800379c <memset>:
 800379c:	4402      	add	r2, r0
 800379e:	4603      	mov	r3, r0
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d100      	bne.n	80037a6 <memset+0xa>
 80037a4:	4770      	bx	lr
 80037a6:	f803 1b01 	strb.w	r1, [r3], #1
 80037aa:	e7f9      	b.n	80037a0 <memset+0x4>

080037ac <_init>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	bf00      	nop
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr

080037b8 <_fini>:
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	bf00      	nop
 80037bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037be:	bc08      	pop	{r3}
 80037c0:	469e      	mov	lr, r3
 80037c2:	4770      	bx	lr
